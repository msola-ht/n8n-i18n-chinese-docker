name: Build n8n Chinese Editor-UI Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

env:
  UPSTREAM_REPO: other-blowsnow/n8n-i18n-chinese

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: 获取上游最新 Release
      id: get_release
      run: |
        latest_release=$(curl -s https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/releases/latest)
        # 使用 xargs 确保去除所有前导和尾随空格
        tag=$(echo "$latest_release" | jq -r .tag_name | xargs)
        asset_url=$(echo "$latest_release" | jq -r '.assets[] | select(.name|endswith(".tar.gz")) | .browser_download_url' | xargs)
        echo "tag=$tag" >> "$GITHUB_OUTPUT"
        echo "asset_url=$asset_url" >> "$GITHUB_OUTPUT"
        echo "Detected upstream tag (quoted for clarity): '$tag'" # 打印带引号的tag，方便调试空格

    - name: Get N8N Version from Tag
      id: get_n8n_version
      run: |
        TAG_REF="${{ steps.get_release.outputs.tag }}"
        # 提取后再次使用 xargs 确保去除所有前导和尾随空格
        N8N_VERSION=$(echo "${TAG_REF#n8n@}" | xargs)
        echo "::set-output name=n8n_version::$N8N_VERSION"
        echo "Extracted N8N Version (quoted for clarity): '$N8N_VERSION'" # 打印带引号的版本号，方便调试空格

    - name: 检查当前仓库是否已发布过此版本
      id: check_local_tag
      run: |
        tag_to_check=${{ steps.get_release.outputs.tag }}
        if git tag -l | grep -q "^$tag_to_check$"; then
          echo "Tag $tag_to_check 已存在于当前仓库，跳过构建和推送。"
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "Tag $tag_to_check 不存在于当前仓库，继续构建和推送。"
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: 退出如果已发布
      if: steps.check_local_tag.outputs.exists == 'true'
      run: |
        echo "Release 已存在于当前仓库，终止 workflow."
        exit 0

    - name: 下载上游 release 文件
      run: |
        mkdir -p src-dist
        curl -L "${{ steps.get_release.outputs.asset_url }}" -o src-dist/editor-ui.tar.gz
        echo "Downloaded ${{ steps.get_release.outputs.asset_url }}"

    - name: 解压 dist 文件
      run: |
        tar -xzvf src-dist/editor-ui.tar.gz -C src-dist
        echo "Extracted dist files to src-dist/dist"

    - name: 生成 Dockerfile
      run: |
        N8N_VERSION=${{ steps.get_n8n_version.outputs.n8n_version }}
        echo "Generating Dockerfile for n8n version: $N8N_VERSION"
        cat <<EOF > Dockerfile
        FROM n8nio/n8n:$N8N_VERSION

        USER root

        RUN apk update \\
            && apk add --no-cache ffmpeg \\
            && rm -rf /var/cache/apk/*

        USER node

        COPY src-dist/dist /usr/local/lib/node_modules/n8n/node_modules/n8n-editor-ui/dist
        EOF
        cat Dockerfile

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Debug Final Image Tags # 新增调试步骤，打印最终的标签字符串
      run: |
        echo "--- Debugging Image Tags ---"
        echo "Full Tag: 'lunare/n8n-chinese:${{ steps.get_release.outputs.tag }}'"
        echo "Version Tag: 'lunare/n8n-chinese:${{ steps.get_n8n_version.outputs.n8n_version }}'"
        echo "Latest Tag: 'lunare/n8n-chinese:latest'"
        echo "----------------------------"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          lunare/n8n-chinese:${{ steps.get_release.outputs.tag }}
          lunare/n8n-chinese:${{ steps.get_n8n_version.outputs.n8n_version }}
          lunare/n8n-chinese:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create Git Tag
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        TAG_NAME=${{ steps.get_release.outputs.tag }}
        echo "Creating Git tag: $TAG_NAME"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag "$TAG_NAME"
        git push origin "$TAG_NAME"
        echo "Successfully created and pushed Git tag $TAG_NAME."
